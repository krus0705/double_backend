/**
 * NOTE: This class is auto generated by the swagger code generator program ().
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.mogree.server.gen.api;

import com.mogree.spring.response.DetailResponse;
import com.mogree.spring.Executer;
import com.mogree.server.gen.model.ContactModel;
import com.mogree.spring.response.StatusResponse;
import com.mogree.spring.response.ListResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
@javax.annotation.Generated(value = "class com.mogree.MogreeCodeGen", date = "2021-05-11T13:27:53.093+02:00")

@RestController
@Api(value = "contact", description = "the contact API")

public interface ContactApi {

    @ApiOperation(value = "Create a new contact", nickname = "createContact", notes = "", authorizations = {
        @Authorization(value = "BasicAuth")
    })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "DetailResponse<ContactModel>"  ) })
    @RequestMapping(value = "/contact",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DetailResponse<ContactModel>> createContact(@ApiParam(value = ""  ) @RequestBody ContactModel contactModelBody);


    @ApiOperation(value = "Delete an existing contact", nickname = "deleteContact", notes = "", authorizations = {
        @Authorization(value = "BasicAuth")
    })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "StatusResponse"  ),
        @ApiResponse(code = 403, message = "User has no access to the contact item"  ),
        @ApiResponse(code = 404, message = "Contact not found"  ) })
    @RequestMapping(value = "/contact/{contactId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<StatusResponse> deleteContact(@ApiParam(value = "",required=true, example = "0") @PathVariable("contactId") Long contactId);


    @ApiOperation(value = "Get a detail of a contact", nickname = "getContactDetail", notes = "", authorizations = {
        @Authorization(value = "BasicAuth")
    })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "DetailResponse<ContactModel>"  ) })
    @RequestMapping(value = "/contact/{contactId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DetailResponse<ContactModel>> getContactDetail(@ApiParam(value = "",required=true, example = "0") @PathVariable("contactId") Long contactId);


    @ApiOperation(value = "Get a list of created contacts", nickname = "getContactList", notes = "", authorizations = {
        @Authorization(value = "BasicAuth")
    })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ListResponse<ContactModel>"  ) })
    @RequestMapping(value = "/contact",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListResponse<ContactModel>> getContactList(@ApiParam(value = "Paging offset", required = true, defaultValue = "0", example = "0")  @RequestParam(value = "offset", required = true, defaultValue="0") Integer offset,@ApiParam(value = "Paging limit", required = true, defaultValue = "-1", example = "-1")  @RequestParam(value = "limit", required = true, defaultValue="-1") Integer limit,@ApiParam(value = "Sort the list", allowableValues = "createdAt")  @RequestParam(value = "sort_column", required = false) String sortColumn,@ApiParam(value = "Sort Order", allowableValues = "asc, desc")  @RequestParam(value = "sort_order", required = false) String sortOrder);


    @ApiOperation(value = "Update an existing contact", nickname = "updateContact", notes = "", authorizations = {
        @Authorization(value = "BasicAuth")
    })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "DetailResponse<ContactModel>"  ) })
    @RequestMapping(value = "/contact",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<DetailResponse<ContactModel>> updateContact(@ApiParam(value = ""  ) @RequestBody ContactModel contactModelBody);

}
