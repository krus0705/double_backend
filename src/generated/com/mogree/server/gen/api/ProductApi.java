/**
 * NOTE: This class is auto generated by the swagger code generator program ().
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.mogree.server.gen.api;

import com.mogree.spring.response.DetailResponse;
import com.mogree.spring.Executer;
import com.mogree.server.gen.model.ProductModel;
import com.mogree.spring.response.StatusResponse;
import com.mogree.spring.response.ListResponse;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
@javax.annotation.Generated(value = "class com.mogree.MogreeCodeGen", date = "2021-05-11T13:27:53.093+02:00")

@RestController
@Api(value = "product", description = "the product API")

public interface ProductApi {

    @ApiOperation(value = "Create a new product", nickname = "createProduct", notes = "", authorizations = {
        @Authorization(value = "BasicAuth")
    })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "DetailResponse<ProductModel>"  ) })
    @RequestMapping(value = "/product",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DetailResponse<ProductModel>> createProduct(@ApiParam(value = ""  ) @RequestBody ProductModel productModelBody);


    @ApiOperation(value = "Delete an existing product", nickname = "deleteProduct", notes = "", authorizations = {
        @Authorization(value = "BasicAuth")
    })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "StatusResponse"  ),
        @ApiResponse(code = 403, message = "User has no access to the product item"  ),
        @ApiResponse(code = 404, message = "Product not found"  ) })
    @RequestMapping(value = "/product/{productId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<StatusResponse> deleteProduct(@ApiParam(value = "",required=true, example = "0") @PathVariable("productId") Long productId);


    @ApiOperation(value = "Get a detail of a product", nickname = "getProductDetail", notes = "", authorizations = {
        @Authorization(value = "BasicAuth")
    })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "DetailResponse<ProductModel>"  ) })
    @RequestMapping(value = "/product/{productId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DetailResponse<ProductModel>> getProductDetail(@ApiParam(value = "",required=true, example = "0") @PathVariable("productId") Long productId);


    @ApiOperation(value = "Get a list of created products", nickname = "getProductList", notes = "", authorizations = {
        @Authorization(value = "BasicAuth")
    })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ListResponse<ProductModel>"  ) })
    @RequestMapping(value = "/product",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListResponse<ProductModel>> getProductList(@ApiParam(value = "Paging offset", required = true, defaultValue = "0", example = "0")  @RequestParam(value = "offset", required = true, defaultValue="0") Integer offset,@ApiParam(value = "Paging limit", required = true, defaultValue = "-1", example = "-1")  @RequestParam(value = "limit", required = true, defaultValue="-1") Integer limit,@ApiParam(value = "Sort the list", allowableValues = "createdAt")  @RequestParam(value = "sort_column", required = false) String sortColumn,@ApiParam(value = "Sort Order", allowableValues = "asc, desc")  @RequestParam(value = "sort_order", required = false) String sortOrder);


    @ApiOperation(value = "Get a html page with detail of the product", nickname = "getProductPage", notes = "")
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "StatusResponse"  ) })
    @RequestMapping(value = "/product/{productShareCode}/page",
        produces = { "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> getProductPage(@ApiParam(value = "",required=true, example = "0") @PathVariable("productShareCode") String productShareCode);


    @ApiOperation(value = "Send the email about published product ", nickname = "sendProductPublishedNotification", notes = "", authorizations = {
        @Authorization(value = "BasicAuth")
    })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"  ),
        @ApiResponse(code = 401, message = "Unauthorized"  ),
        @ApiResponse(code = 403, message = "Forbidden"  ) })
    @RequestMapping(value = "/product/{productId}/notification/{notificationType}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<StatusResponse> sendProductPublishedNotification(@ApiParam(value = "",required=true, example = "0") @PathVariable("productId") Long productId,@ApiParam(value = "e.g. sms, email",required=true, example = "0") @PathVariable("notificationType") String notificationType);


    @ApiOperation(value = "Update an existing product", nickname = "updateProduct", notes = "", authorizations = {
        @Authorization(value = "BasicAuth")
    })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "DetailResponse<ProductModel>"  ) })
    @RequestMapping(value = "/product",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<DetailResponse<ProductModel>> updateProduct(@ApiParam(value = ""  ) @RequestBody ProductModel productModelBody);

}
